name: Run Automation Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite:
          - tests/test_api.py
          - tests/test_manual.py

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest

      - name: Run tests with pytest
        run: |
          pytest -v ${{ matrix.suite }} --alluredir=allure-results --maxfail=1 --disable-warnings -q | tee pytest-output.txt
          echo "${PIPESTATUS[0]}" > exit-code.txt
        continue-on-error: true

      - name: Set safe artifact name
        id: sanitize
        run: echo "safe_name=$(echo '${{ matrix.suite }}' | tr '/' '_' | tr '.' '_')" >> $GITHUB_OUTPUT

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ steps.sanitize.outputs.safe_name }}
          path: allure-results

      - name: Fail the job if pytest failed
        run: |
          exit_code=$(cat exit-code.txt)
          exit $exit_code
        if: always()

  generate-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    outputs:
      report-dir: allure-report

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI and unzip
        run: sudo apt-get update && sudo apt-get install -y gh jq unzip

      - name: Download and merge allure results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p allure-results
          artifacts=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[].name' | grep '^allure-results-')

          echo "Merging artifacts:"
          echo "$artifacts"

          for name in $artifacts; do
            url=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq ".artifacts[] | select(.name==\"$name\") | .archive_download_url")
            curl -sL -H "Authorization: token $GH_TOKEN" "$url" -o "$name.zip"
            unzip -q "$name.zip" -d temp
            cp -r temp/* allure-results/
            rm -rf temp "$name.zip"
          done

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
          tar -zxvf allure-2.27.0.tgz
          sudo mv allure-2.27.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Generate Allure report
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

  deploy-report:
    runs-on: ubuntu-latest
    needs: generate-report
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Output Allure URL in Summary
        run: |
          echo "### âœ… Allure Report deployed to:" >> $GITHUB_STEP_SUMMARY
          echo "[ðŸ”— Click to view](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
